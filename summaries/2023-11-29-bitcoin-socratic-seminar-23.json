{
  "summary": [
    {
      "summary": "Ocean.xyz is a new type of mining pool that aims to decentralize Bitcoin mining. Unlike traditional pools, Ocean.xyz is non-custodial, meaning that miners are paid directly by the Bitcoin network. This is similar to how Eligius, a pool that found a block in 2011, operated. The generation transaction in Bitcoin contains over 900 outputs, which are the network's way of directly paying miners. Ocean.xyz follows the same method, coordinating the correct split of rewards among miners. It ensures that miners are paid in the generation transaction whenever possible, although there is a restriction in Bitcoin that freshly mined bitcoins cannot be spent for 100 blocks. No account is required to mine with Ocean.xyz, miners simply need to put their Bitcoin address as a worker name in their miner interface. The current payout threshold is 0.01048576 BTC. Below this threshold, rewards will accumulate until it is exceeded, and then the payout will occur automatically. Ocean.xyz aims to provide a more transparent and disintermediated option for traditional pooled mining. The pool is responsible for constructing block templates, and miners can ask questions in the community chat on the website.\n",
      "summaryeli15": "OCEAN is a new type of mining pool that wants to make Bitcoin mining more decentralized. Miners are paid directly by the Bitcoin network, and OCEAN helps split the rewards correctly. OCEAN constructs blocks so that miners can be paid directly. Freshly mined bitcoins cannot be spent for 100 blocks to avoid disruption. No account is needed, just put your Bitcoin address as a worker name. Rewards below a certain threshold will accumulate and payout automatically once exceeded.",
      "title": "Ocean Website",
      "link": "https://ocean.xyz/"
    },
    {
      "summary": "Eligius, a mining pool, was successful in the early days of GPU mining and helped the community mine a significant amount of bitcoins. However, the pool eventually shut down, leading to the centralization and overreach of other pool operators in Bitcoin mining. This centralization poses a risk to the security model of Bitcoin and its censorship-resistant property.\n\nCurrently, pools operate like custodial bank accounts and have the power to decide who can use Bitcoin. The \"51%\" attack, where an entity controls the majority of the network hashrate, is already a reality with only 20-30% of the hashrate. Censorship is also a concern, as 11 entities control transaction inclusion in nearly every block, with the two largest being able to impose censorship successfully.\n\nTo address these issues, Eligius is being relaunched as OCEAN, a transparent and non-custodial pool. OCEAN aims to enable miners to truly be miners by providing visibility into block templates and offering direct block rewards from Bitcoin. The pool plans to decentralize mining by redesigning block template construction and incorporating Lightning payouts. OCEAN will operate at a 0% fee for the first two months and will ensure fair fees for all miners. The goal is to radically decentralize Bitcoin mining with OCEAN.",
      "summaryeli15": "GPU mining is a way to mine for bitcoins using your computer's hardware. In the early days, miners needed to work together to have a better chance at earning bitcoins. Eligius was a successful and transparent mining pool, but it had to shut down. Now, other mining pools have too much control over Bitcoin. They can decide who can use it and even censor transactions. This is not good for Bitcoin's security and decentralization. Eligius is being relaunched as OCEAN, a new type of pool that aims to bring back transparency and fairness to mining.",
      "title": "Message from OCEAN founder Luke Dashjr",
      "link": "https://ocean.xyz/about"
    },
    {
      "summary": "Mutiny's favorite feature is their billing system for Mutiny+, which is designed to fit a Bitcoin ethos. Unlike traditional fiat processes, Bitcoin operates as a \"push\" system, meaning consent from the user is required for every payment. Mutiny+ uses Nostr Wallet Connect (NWC) to send payment requests to users' wallets, but it's up to the user to initiate the payment. Autopay with a budget limit can be set to prevent overcharging. In contrast, canceling a Mutiny+ subscription is entirely within the user's control by simply disabling autopay. Mutiny aims to create a world where all subscriptions work in this way. They provide an example with ZapplePay, a project that offers AutoZaps, allowing users to subscribe to others on Nostr and receive payment requests. This system is built on open standards and compatible with wallets that support NWC. Mutiny also highlights the potential for NWC in recurring donations and service payments, aiming for a secure, trustless, and privacy-friendly user experience. They are exploring better integration of NWC subscriptions with a Nostr identity for authenticated services. Mutiny encourages service providers interested in Bitcoin-native subscription payments to engage in their chat for assistance.",
      "summaryeli15": "Mutiny has a special way of billing users called Mutiny+. They redesigned the typical payment process to fit with the principles of Bitcoin. With Mutiny+, users have complete control over their payments. Instead of automatically taking money from a user's account, Mutiny sends a payment request to their Bitcoin wallet. The user can choose whether or not to pay. This is different from other services where it can be difficult to cancel automatic payments. Mutiny wants to create a world where all subscriptions work this way. They also mentioned another project called ZapplePay that lets users subscribe to others and make payments through their wallets. This system is built on open standards and can be used with certain wallets like Mutiny and Alby. They are also working on integrating it with other services like paid relays and paywalls.",
      "title": "Solving subscriptions on Bitcoin, one zap at a time",
      "link": "https://blog.mutinywallet.com/solving-subscriptions-on-bitcoin-one-zap-at-a-time/"
    },
    {
      "summary": "The author starts by introducing the Lightning Address protocol, highlighting its popularity and user experience improvements, but also acknowledging its privacy and security drawbacks. The author prepared a gist with three different designs that aim to address these issues while maintaining the positive user experience. The author seeks feedback from the community before finalizing the protocol.\n\nThe current Lightning Address protocol has several issues, including the sender revealing their IP address to the recipient's domain owner, the potential for invoice swapping, and the dependency on DNS servers and HTTP stacks. The author suggests two mechanisms to improve the protocol: privately obtaining the node_id associated with a domain and privately contacting the domain to obtain the recipient's payment details.\n\nOption 1 proposes using DNS records to link domains to nodes. Domain owners would add a DNS TXT record with a blinded path to their node. The sender could then query the DNS record to obtain the blinded path and contact the node for the recipient's payment details. This proposal is simple and relies on standard mechanisms but requires domain owners to publish DNS TXT records.\n\nOption 2 suggests using node_announcement messages on the Lightning Network to link nodes to specific domains. Nodes would advertise the domains they own in their node_announcement messages, and the sender would sync those messages to obtain the domain owner's node_id. This proposal eliminates the need for DNS records but requires syncing node_announcement messages and validating certificate chains.\n\nOption 3 involves domain owners creating DNS TXT records for each user directly containing their Bolt 12 offer. The sender can query the DNS record to obtain the offer. This option is straightforward for senders but may burden domain owners with the creation of multiple DNS records.\n\nThe author is seeking feedback on these options and recommends implementing options 1 and 3, depending on DNS capabilities. The author thanks Rusty and Matt for reviewing the early drafts of the proposal.",
      "summaryeli15": "The author is discussing the lightning address protocol, which is a way for people to make payments using cryptocurrency. They mention that the protocol has some privacy and security issues, and propose three different ways to improve it. One way involves using DNS records to link domains to cryptocurrency accounts, another way involves using a network called lightning to link nodes to domains, and the third way involves using DNS records to store payment details directly. The author wants feedback on which option to choose.",
      "title": "Lightning-dev\\] Lightning Address in a Bolt 12 world",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-November/004204.html"
    },
    {
      "summary": "ZEUS v0.8.0 is now available as a beta build for Android and iOS. The new version introduces several new features, including an embedded node, LSP connectivity, and self-custodial lightning addresses.\n\nThe embedded LND node eliminates the need for users to remotely connect to their own lightning node. Users can simply hit 'Quick Start' and start syncing the blockchain instantly. The embedded node provides most of the same functionality as a remote node, including lightning and on-chain transactions, and channel management.\n\nTo lower the barriers for new users, ZEUS offers a channel service from their lightning service provider, OLYMPUS. Users can generate invoices without setting up lightning channels beforehand and settle payments instantly with a 0-conf channel service. The LSP also provides privacy by concealing nodes' public keys from payers.\n\nZEUS PAY, the self-custodial lightning address feature, allows users to receive payments to a static lightning address even if they are not online all the time. Payments can be claimed within 24 hours and the feature is available for both embedded and remote LND users.\n\nZEUS v0.8.0 also supports Simple Taproot Channels, reducing fees and improving privacy. Users can also benefit from a new contact book for easy payments to friends and family.\n\nThe update includes other features to enhance user privacy, such as neutrino block filters and client-side path finding. ZEUS v0.8.0 also introduces a new look with new branding and UI changes.\n\nOverall, the update brings numerous enhancements and bug fixes, and user feedback is welcomed to further improve the payment experience.",
      "summaryeli15": "ZEUS v0.8.0 is a new version of a mobile app called ZEUS that allows people to use Bitcoin's lightning network. The app has added a lot of new features, including an embedded lightning node, a lightning service provider, and a self-custodial lightning address. These features make it easier for users to send and receive payments using Bitcoin's lightning network. The app also has improved privacy features and a new look with branding changes. The new version has many other enhancements and bug fixes, and the creators are looking for feedback from users to make it even better.",
      "title": "The ZEUS v0.8.0 open beta is here",
      "link": "https://blog.zeusln.com/zeus-v0-8-0-open-beta/"
    },
    {
      "summary": "Zaplocker is a non-custodial lightning address server that allows users to run a web server on their behalf. This is important because lightning addresses require a web server for wallets to request lightning invoices. Zaplocker solves this problem by allowing users to create an account and share lightning payment hashes with the server. The server then displays the user's lightning address and a \"pending payments\" dashboard.\n\nHowever, there is a potential attack where lightning address servers can steal funds from senders. To address this, Zaplocker proposes signing and broadcasting a series of nostr messages at different stages of a payment. This solution is implemented in Zaplocker.\n\nWhen a user logs in, they create payment hashes for the server to use when generating lightning invoices. Zaplocker has the user sign these payment hashes using their nostr public key and displays the user's signature and nostr public key on the invoice generation endpoint. Sending wallets can validate the signature to ensure the user has the keys.\n\nIt is recommended to consider implementing the zap spec when implementing support for the Zaplocker protocol. While not mandatory, zaps are in the name, so it's worth considering. Overall, Zaplocker provides non-custodial lightning address server support with base layer functionality.",
      "summaryeli15": "Zaplocker is a service that helps people use lightning addresses. Lightning addresses are like online wallets where you can receive money. But to make it work, you usually need to run a web server, which can be complicated. Zaplocker solves this problem by running the web server for you. It also protects against a type of attack where someone could steal your money. So, Zaplocker makes it easy and safe to use lightning addresses.",
      "title": "Zaplocker",
      "link": "https://github.com/supertestnet/zaplocker"
    },
    {
      "summary": "Nostrdb is an extremely fast database backed by lmdb. It stores nostr events as a custom in-memory representation, allowing for zero-copy and O(1) access to all note fields. The design of nostrdb is heavily influenced by strfry, the fastest nostr relay. However, nostrdb is specifically designed to be embedded as a C library in any application and does not currently provide full relay functionality. The use of lmdb enables memory-mapped access and querying, making it exceptionally fast. Nostrdb is similar to flatbuffers, but it is purpose-built for nostr events. You can find the repository for nostrdb on GitHub and see the build status using the provided badge.",
      "summaryeli15": "Nostrdb is a really fast database that stores events. It uses a special way to represent the events in memory that makes it super fast to access. It's kind of like a special tool called flatbuffers, but made specifically for nostr events. Nostrdb is based on another database called strfry, but it can be used as a library in other programs.",
      "title": "Nostrdb",
      "link": "http://git.jb55.com/nostrdb/file/README.md.html"
    }
  ]
}